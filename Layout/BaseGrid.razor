@using MudBlazorPlayground.ViewModels
@using MudBlazorPlayground.DTOs
@typeparam T where T : MudBlazorPlayground.DTOs.BaseDto

<MudDataGrid Items="@Vm.Items" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true" 
             ReadOnly="@_readOnly" EditMode="@DataGridEditMode.Form"
             Bordered="true" Dense="true" EditTrigger="@DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudText Typo="Typo.h6"></MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        @foreach (var column in Vm.Columns)
        {
            /* TODO: TL;DR https://stackoverflow.com/questions/76522057/mudblazor-with-dynamic-columns - for now its ok. */
            @* <PropertyColumn T="T" TProperty="typeof()" Property="@column.Property" Title="@column.Title"/> <---- cuz this wont work *@

            if (column.Property is not null)
            {
                <PropertyColumn T="T" TProperty="string" Property="@column.Property" Title="@column.Title" />
            }
            if (column.PropertyInt is not null)
            {
                <PropertyColumn T="T" TProperty="int" Property="@column.PropertyInt" Title="@column.Title" />
            }
            if (column.PropertyBool is not null)
            {
                <PropertyColumn T="T" TProperty="bool" Property="@column.PropertyBool" Title="@column.Title" />
            }
            if (column.PropertyDate is not null)
            {
                <PropertyColumn T="T" TProperty="DateTime" Property="@column.PropertyDate" Title="@column.Title" />
            }
        }
        <TemplateColumn Hidden="@_hasOnlyReadPermission" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.RemoveRedEye" OnClick="@(() => Details(context.Item))" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => OnDelete(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="T" />
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter]
    public required BaseVM<T> Vm { get; set; }
    
    private string _searchString;
    
    private bool _readOnly = false;
    private bool _hasOnlyReadPermission = false;

    private void OnDelete(T item)
    {
        var dto = (BaseDto)item;
        Console.WriteLine("Delete: {0}", dto.Id);
    }

    private void Details(T item)
    {
        var dto = (BaseDto)item;
        Console.WriteLine("Details: {0}", dto.Id);
    }
}